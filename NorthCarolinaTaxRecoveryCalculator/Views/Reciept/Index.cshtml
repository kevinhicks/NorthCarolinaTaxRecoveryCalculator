@model NorthCarolinaTaxRecoveryCalculator.Models.Reciept
<div id="fixedFormDiv">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.Project.ID);
        @Html.HiddenFor(model => model.Project.Name);
    
        <fieldset>
            <legend>Reciept</legend>
            <div class="editor-label">
                @Html.LabelFor(model => model.RIF)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.RIF, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.RIF)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.DateOfSale)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.DateOfSale, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.DateOfSale)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.StoreName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.StoreName, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.StoreName)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.County)
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(model => model.County, new SelectList(NorthCarolinaTaxRecoveryCalculator.Models.County.Counties, "ID", "Name"))
                @Html.ValidationMessageFor(model => model.County)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.SalesTax)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.SalesTax, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.SalesTax)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.FoodTax)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.FoodTax, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.FoodTax)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.SalesAmount)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.SalesAmount, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.SalesAmount)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Notes)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Notes, new { autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.Notes)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.OnBillDetail)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.OnBillDetail)
                @Html.ValidationMessageFor(model => model.OnBillDetail)
            </div>
            <p>
                <input type="submit" value="Create" id="createBtn" />
            </p>
        </fieldset>
    }
</div>
<div id="recieptRecords">
    @{Html.RenderAction("List", new { ProjectID = Model.Project.ID });}
</div>
<div id="notePopup">
</div>
@using (Html.BeginForm("Delete", "Reciept", FormMethod.Post, new { id = "hiddenDeleteForm" }))
{
    <input type="hidden" id="RecieptID" /> 
}
@section scripts {
    <script src="~/Scripts/jquery.signalR-0.5.3.min.js" type="text/javascript"></script>
    <script src="~/Scripts/accounting.min.js" type="text/javascript"></script>
    <script src="~/Scripts/date.js" type="text/javascript"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script type="text/javascript">

        var hub;
        function getProjectID() {
            return @Html.Raw(Model.Project.ID);
        }
        
        //Return an array containing all the county names
        function getCountyNames() {
            var names = @Html.Raw(ViewBag.Counties);
            return names;
        }

        $(function () {

            initViewport();
            initWatermarks();
            initTable();

            initNotesPopup();
            initSignalR();
            initForm();

            initEditButton();
            initCancelButton();
            initDeleteButton();
            initDateFormatting();
            initStoreNameAutoComplete();

            refreshTotals();

            //If we want to create a NEW reciept,
            //then remove any ID that might be floating 
            //around in the form ;)
            $("#createBtn").click(function () {
                $("#ID").val("");
            });

            //Collapse the totals areas
            $(".collapsible").collapsible();

            //Start with the RIF field having the default focus
            $("#RIF").focus();
            
            $(window).resize(function() {
                initViewport();
            });
        });


        //Setup all the SignalR goodness, and wire up all the events
        function initSignalR() {

            hub = $.connection.recieptHub;
            
            //Start hubbing!
            $.connection.hub.start();

            hub.recieveReciept = addRowToTable;
            hub.onRecieptDeleted = deleteRecieptFromTable;

            hub.onNewRecieptSaved = function () {                
                //clear previous validation errors
                $("span.field-validation-valid").each(function () {
                    $(this).empty();
                });

                //clear all the fields, and get ready to add another reciept

            }

            //Whenever we accedintally submit an invalid Recipet
            hub.onInvalidReciept = function (validationErrors) {
                //clear previous validation errors
                $("span.field-validation-valid").each(function () {
                    $(this).empty();
                });

                //display all the current validation errors

                //loop thru all the validation errors the server returned back to us
                for (var errorIndex = 0; errorIndex < validationErrors.length; errorIndex++) {
                    var msg = validationErrors[errorIndex].ErrorMessage;
                    //loop thru all the elements that this error refers to
                    for (var elemIndex = 0; elemIndex < validationErrors[errorIndex].MemberNames.length; elemIndex++) {
                        //Append our error message to them
                        $("span[data-valmsg-for='" + validationErrors[errorIndex].MemberNames[elemIndex] + "']").each(function () {
                            $(this).text(msg);
                        });
                    }
                }
            }

            
            //Send all the reciept information to the server
            $("#createBtn").click(function () {
                hub.addReciept({
                    ProjectID: getProjectID(),
                    RIF:  $("input#RIF").val(),
                    DateOfSale: $("input#DateOfSale").val(),
                    StoreName: $("input#StoreName").val(),
                    County: $("select#County").val(),
                    SalesTax: $("input#SalesTax").val(),
                    FoodTax: $("input#FoodTax").val(),
                    SalesAmount: $("input#SalesAmount").val() | 0,
                    OnBillDetail: ($("input#OnBillDetail").is(":checked")),
                    Notes: $("input#Notes").val()
                });
            });
        }

        //make sure the form NEVER actually submits
        function initForm() {
            $("form").submit(function (e) {
                return false;
            });
        }

        //Adds a new row to the table with new reciept information
        function addRowToTable(reciept) {
            //formatting
            reciept.SalesTax = formatMoney(reciept.SalesTax);
            reciept.FoodTax = formatMoney(reciept.FoodTax);
            reciept.SalesAmount = formatMoney(reciept.SalesAmount);

            var newRow = "<tr data-id=" + reciept.ID + " class='recieptRecord'>";
            newRow += "<td>" + reciept.RIF + "</td>";
            newRow += "<td>" + reciept.DateOfSale + "</td>";
            newRow += "<td>" + reciept.StoreName + "</td>";
            newRow += "<td>" + getCountyNames()[reciept.County - 1] + "</td>";
            newRow += "<td>" + reciept.SalesTax + "</td>";
            newRow += "<td>" + reciept.FoodTax + "</td>";
            newRow += "<td>" + reciept.SalesAmount + "</td>";
            if(reciept.Notes != null && reciept.Notes != "") {
                newRow += "<td><div class='note' data-note='" + reciept.Notes + "' >!</div>";
            } else {
                newRow += "<td></td>";
            }
            if(reciept.OnBillDetail) {
                newRow += "<td><input class='check-box' disabled='disabled' checked type='checkbox' /></td>";
            } else {
                newRow += "<td><input class='check-box' disabled='disabled' type='checkbox' /></td>";
            }
            newRow += "<td><a href='#' class='editIcon'>Edit</a> | <a href='#' class='deleteIcon'>Delete</a></td></tr>";            console.log(newRow);
            $("table tbody").append($(newRow));

                
            //refereshTotals
            refreshTotals();

            //Allow newly created Delete buttons to create there events
            initDeleteButton();
        }

        function deleteRecieptFromTable(recieptID) {
            $("table tbody tr").each(function() {
                if($(this).attr("data-id") == recieptID) {
                    $(this).remove();                
                }
            });
        }

        function formatMoney(number) {
            return accounting.formatMoney(number, {
	            precision: 2,
	            thousand: ",",
	            format: {
		            pos : "%s%v",
		            neg : "%s(%v)",
		            zero: "%s  --"
	            }
            });
        }

        //Recalculate the totals for the bottom of the table
        function refreshTotals() {
            
            //Sales Tax & Food Tax & Sales Amount Totals
            for(var column = 4; column < 7; column++) {
                var total = 0;
                $("table.tablesorter tr").each(function() {
                    var txt = $(this).find("td:eq(" + column + ")").text();
                
                    //remove Dollarsign and commas
                    txt = $.trim(txt);
                    if(txt.substring(0,1) == "$")
                        txt = txt.substring(1);                    
                    txt.replace(",", "");

                    total += Number(txt);
                });
                
                $("table.tablesorter tfoot tr").find("th:eq(" + column + ")").text(formatMoney(total));
            }

            //Number of notes
            var total = 0;
            $("table.tablesorter tr").each(function() {
                var txt = $(this).find("td:eq(7)").text().trim();
                
                if(txt != "") {
                    total++;
                }
            });                
            $("table.tablesorter tfoot tr").find("th:eq(7)").text(total);

            $("table").trigger("update"); 
        }

        function unusedStuff() {
            $("input#createBtn").show();
            $("input#updateBtn").hide();
            $("#RIF").keyup(function () {
                var found = false;

                $("table.tablesorter tr").each(function () {
                    var cell = $(this).find("td:first").text();

                    //If there is already a record with this RIF,
                    //then hide then create button, and show
                    //the update button
                    if ((cell != "") && ($.trim(cell) == $.trim($("#RIF").val()))) {
                        found = true;
                        return false;
                    }
                });

                if (found) {
                    $("input#createBtn").hide();
                    $("input#updateBtn").show();
                } else {
                    $("input#updateBtn").hide();
                    $("input#createBtn").show();
                }

            });
        }

        //Allow the list of recipets to fill the remaining width, and height of the window
        function initViewport() {   
            var top = $("div#recieptRecords").offset().top;
            var height = $(window).height();
            $("div#recieptRecords").height(height - top);
        }

        //Add the watermarks to the input elements in the New Reciept form
        function initWatermarks() {
            //Add watermarks to the input fields
            $.watermark.options.className = 'watermark';
            $.watermark.options.useNative = false;
            $("input#RIF").watermark("RIF    ");
            $("input#DateOfSale").watermark("Date Of Reciept     ");
            $("input#StoreName").watermark("Store Name     ");
            $("input#SalesTax").watermark("Sales Tax    ");
            $("input#FoodTax").watermark("Food Tax    ");
            $("input#SalesAmount").watermark("Sales Amount    ");
            $("input#Notes").watermark("Notes    ");
        }

        //Configure the table containing the list of recipets to be sortable
        function initTable() {
            $("table").tablesorter({
                sortList: [[0, 0]] //sort by rif automatically
            });
        }

        function initEditButton() {
            //When we click on an edit icon, fill the form with the values from that row
            $(".editIcon").click(function () {
                //Some cross browser options to simply scroll to the top of the page
                //$(window).scrollTop();
                //document.body.scrollTop = 0;

                //Load the field values

                var rif = $(this).parent().parent().find("td:eq(0)").text();
                var date = $(this).parent().parent().find("td:eq(1)").text();
                var store = $(this).parent().parent().find("td:eq(2)").text();
                var salesTax = $(this).parent().parent().find("td:eq(4)").text();
                var foodTax = $(this).parent().parent().find("td:eq(5)").text();
                var salesAmt = $(this).parent().parent().find("td:eq(6)").text();
                var notes = $(this).parent().parent().find("td:eq(7) div").attr("title");
                var billDetail = $(this).parent().parent().find("td:eq(8) input").prop("checked");

                //clean it up
                var rif = $.trim(rif);
                var date = $.trim(date);
                var store = $.trim(store);
                var salesTax = $.trim(salesTax).substring(1).replace(",", "");
                var foodTax = $.trim(foodTax).substring(1).replace(",", "");
                var salesAmt = $.trim(salesAmt).substring(1).replace(",", "");
                var notes = $.trim(notes);

                $("#RIF").val($.trim(rif));
                $("#DateOfSale").val($.trim(date));
                $("#StoreName").val($.trim(store));
                $("#SalesTax").val($.trim(salesTax));
                $("#FoodTax").val($.trim(foodTax));
                $("#SalesAmount").val($.trim(salesAmt));
                $("#Notes").val($.trim(notes));
                $("#OnBillDetail").prop("checked", billDetail);

                $("#RIF").keyup();
                //$("select#County option:contains('" + $("tr#" + this.id + " .countyCol").text() + "')").attr('selected', 'selected');

                //$("#RIF").select();
            });
        }

       
        function initCancelButton() {
            //When we click the cancel button, we want to clear all previously enter field data
            $("#Cancel").click(function () {
                $("#RIF").val("");
                $("#DateOfSale").val("");
                $("#StoreName").val("");
                $("#SalesTax").val("");
                $("#FoodTax").val("");
                $("#SalesAmount").val("");
                $("#Notes").val("");
            });
        }

        function initDeleteButton() {
            $(".deleteIcon").click(function () {

                //Find the id parent tr
                var id = $(this).parent().parent().attr("data-id");

                hub.deleteReciept(id);
            });
        }

        //Auto-format the date field
        function initDateFormatting() {
            $("input#DateOfSale").change(function() {
                var date = Date.parse( $(this).val() );         

                //If we can, convert the entered date into somethnign more pretty, and complete
                if(date != null) {                                         
                    date = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();                    
                    $(this).val(date);
                }
            });
        }

        function initStoreNameAutoComplete() {

            //Load the store names from the database
            //<?php $reciepts = new RecieptsModal(); ?>
            //var storeNames = <?php echo json_encode($reciepts->getStoreNames()); ?>;        
            //Add auto complete to the store names field
            //$("#storeField").autocomplete({
            //    source: storeNames
            //});
        }

        //Setup the Notes popup
        function initNotesPopup() {
            //It shoudl initail be hidden
            $("div#notePopup").hide();

            $(".note").hover(
                function () {
                    $("div#notePopup").show();
                    $("div#notePopup").text($(this).attr("title"));
                    $("div#notePopup").offset({
                        left: $(this).offset().left - $("div#notePopup").width(),
                        top: $(this).offset().top
                    });
                },
                function () {
                    $("div#notePopup").hide();
                }
            );

            $("div#notePopup").hover(
            function () {
                $("div#notePopup").show();
            },
            function () {
                $("div#notePopup").hide();
            }
        );
        }
    </script>
}

@model NorthCarolinaTaxRecoveryCalculator.Models.Data.PaymentVoucher
@{
    ViewBag.Title = "Create/Edit";
}

<h2>@Model.Project.Name - @ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>PaymentVoucher</legend>
        @Html.ValidationSummary()
        <div id="voucherArea">
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.ProjectID)

            <div class="editor-label">
                @Html.LabelFor(model => model.CheckNumber)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.CheckNumber)
                @Html.ValidationMessageFor(model => model.CheckNumber)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Date)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Date)
                @Html.ValidationMessageFor(model => model.Date)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PaidTo)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PaidTo)
                @Html.ValidationMessageFor(model => model.PaidTo)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PreparedBy)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.PreparedBy, "", new { disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.PreparedBy)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ApprovedBy)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ApprovedBy)
                @Html.ValidationMessageFor(model => model.ApprovedBy)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.RBCApproval)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.RBCApproval)
                @Html.ValidationMessageFor(model => model.RBCApproval)
            </div>

            <p>
                <input type="submit" value="Save" />
            </p>
        </div>
        <div id="entriesArea">
            @Html.Partial("_EntryList")
        </div>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { ProjectID = Model.Project.ID })
</div>

@section style {
    <style type="text/css">
        div#voucherArea {
            float: left;
            width: 230px;
            margin-left: 20px;
        }

        div#entriesArea {
            margin-left: 250px;
        }

        table tbody input[type="text"] {
            width: 100%;
        }

        .text_left {
            text-align: left;
        }

        .text_center {
            text-align: center;
        }

        .text_right {
            text-align: right;
        }
    </style>
}

@section scripts {
    <script src="~/Scripts/accounting.min.js" type="text/javascript"></script>
    <script type="text/javascript">

        $(function () {
            //sort on check numbers by default
            $("table").tablesorter({ sortList: [[0, 0]] });

            //clicking the delete link wil remove the row from the table
            $(".deleteLink").click(function () {
                $(this).parent().parent().remove();
            });

            $("form").submit(function () {
                $(".amount").each(function () {
                    var v = unformatMoney($(this).val())
                    $(this).val(v);
                });

                return true;
            });

            $.ajaxSetup({ cache: false });

            //click the add rows button, should adjust the form url, and post it
            $("#addRows").click(function () {
                $.post("@Url.Action("AddRows")", $("form").serialize(), function (data, status) {
                    $("#entriesArea").html(data);

                    //Refresh bindings
                    $(".deleteLink").click(function () {
                        $(this).parent().parent().remove();
                    });
                });
            });

            //When we clik on a amount field, convert the number from a pretty currency, to simple decimal
            $(".amount").focus(function () {
                var v = unformatMoney($(this).val(), true)
                $(this).val(v);
            });

            //when we leave the fields, reformat it
            $(".amount").blur(function () {
                var v = formatMoney($(this).val());
                $(this).val(v);
            });

            function unformatMoney(number, clearZero) {
                var v = accounting.unformat(number);
                if (v == "0" && clearZero) {
                    return "";
                }
                return v;
            }

            function formatMoney(number) {
                return accounting.formatMoney(number, {
                    precision: 2,
                    thousand: ",",
                    format: {
                        pos: "%s%v",
                        neg: "%s(%v)",
                        zero: "%s%v"
                    }
                });
            }
        });
    </script>
}